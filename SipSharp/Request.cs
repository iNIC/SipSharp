using System;
using System.Collections.Specialized;
using System.IO;
using SipSharp.Headers;

namespace SipSharp
{
    class Request : IRequest
    {
    	public Request(string method, string path, string version)
        {
            Body = new MemoryStream();
            Method = method;
            Uri = SipUri.Parse(path);
            SipVersion = version;
            Headers = new NameValueCollection();
        }


    	/// <summary>
    	/// Gets body stream.
    	/// </summary>
    	public Stream Body { get; private set; }

    	/// <summary>
    	/// All headers.
    	/// </summary>
    	public NameValueCollection Headers { get; private set; }

    	/// <summary>
    	/// Gets or sets requested URI.
    	/// </summary>
    	/// <remarks>
    	/// <para>
    	/// The initial Request-URI of the message SHOULD be set to the value of the URI in
    	/// the To field. One notable exception is the REGISTER method; behavior for
    	/// setting the Request-URI of REGISTER is given in Section 10 (RFC 3261). It may
    	/// also be undesirable for privacy reasons or convenience to set these fields to
    	/// the same value (especially if the originating UA expects that the Request-URI
    	/// will be changed during transit).
    	/// </para>
    	/// </remarks>
    	public SipUri Uri { get; set; }

    	/// <summary>
    	/// Gets or sets SIP version used.
    	/// </summary>
    	public string SipVersion { get; set; }

    	/// <summary>
    	/// Gets or sets requested method.
    	/// </summary>
    	public string Method { get; set; }

    	/// <summary>
    	/// Gets or sets whom the request is intended for.
    	/// </summary>
    	/// <remarks>
    	/// <para>
    	/// The To header field first and foremost specifies the desired "logical"
    	/// recipient of the request, or the address-of-record of the user or resource that
    	/// is the target of this request. This may or may not be the ultimate recipient of
    	/// the request. The To header field MAY contain a SIP or SIPS URI, but it may also
    	/// make use of other URI schemes (the tel URL (RFC 2806 [9]), for example) when
    	/// appropriate. All SIP implementations MUST support the SIP URI scheme. Any
    	/// implementation that supports TLS MUST support the SIPS URI scheme. The To
    	/// header field allows for a display name.
    	/// </para>
    	/// </remarks>
    	public Contact To { get; set; }

    	/// <summary>
    	/// Gets or sets whom the request is from.
    	/// </summary>
    	/// <remarks>
    	/// <para>
    	/// The From header field indicates the logical identity of the initiator of the
    	/// request, possibly the user's address-of-record. Like the To header field, it
    	/// contains a URI and optionally a display name. It is used by SIP elements to
    	/// determine which processing rules to apply to a request (for example, automatic
    	/// call rejection). As such, it is very important that the From URI not contain IP
    	/// addresses or the FQDN of the host on which the UA is running, since these are
    	/// not logical names.
    	/// </para><para>
    	/// The From header field allows for a display name. A UAC SHOULD use the display
    	/// name "Anonymous", along with a syntactically correct, but otherwise meaningless
    	/// URI (like sip:thisis@anonymous.invalid), if the identity of the client is to
    	/// remain hidden.
    	/// </para><para>
    	/// Usually, the value that populates the From header field in
    	/// requests generated by a particular UA is pre-provisioned by the user or by the
    	/// administrators of the user's local domain. If a particular UA is used by
    	/// multiple users, it might have switchable profiles that include a URI
    	/// corresponding to the identity of the profiled user. Recipients of requests can
    	/// authenticate the originator of a request in order to ascertain that they are
    	/// who their From header field claims they are (see Section 22 for more on
    	/// authentication).
    	/// </para>
    	/// </remarks>
    	public Contact From { get; set; }

    	/// <summary>
    	/// Gets or sets call id.
    	/// </summary>
    	/// <remarks>
    	/// <para>
    	/// The Call-ID header field acts as a unique identifier to group together a series
    	/// of messages
    	/// </para>
    	/// <para>
    	/// In a new request created by a UAC outside of any dialog, the Call-ID header
    	/// field MUST be selected by the UAC as a globally unique identifier over space
    	/// and time unless overridden by method-specific behavior. All SIP UAs must have a
    	/// means to guarantee that the Call- ID header fields they produce will not be
    	/// inadvertently generated by any other UA. 
    	/// <para>
    	/// Note that when requests are retried
    	/// after certain failure responses that solicit an amendment to a request (for
    	/// example, a challenge for authentication), these retried requests are not
    	/// considered new requests, and therefore do not need new Call-ID header fields;
    	/// see Section 8.1.3.5 (RFC 3261).
    	/// </para>
    	/// </remarks>
    	public string CallId { get; set; }

    	/// <summary>
    	/// Gets or sets transaction identifier.
    	/// </summary>
    	/// <remarks>
    	/// The CSeq header field serves as a way to identify and order transactions. It
    	/// consists of a sequence number and a method. The method MUST match that of the
    	/// request. For non-REGISTER requests outside of a dialog, the sequence number
    	/// value is arbitrary. The sequence number value MUST be expressible as a 32-bit
    	/// unsigned integer and MUST be less than 2**31. As long as it follows the above
    	/// guidelines, a client may use any mechanism it would like to select CSeq header
    	/// field values.
    	/// </remarks>
    	public CSeq CSeq { get; set; }

    	/// <summary>
    	/// Gets or sets maximum number of times the request can be forwarded.
    	/// </summary>
    	/// <remarks>
    	/// <para>
    	/// The Max-Forwards header field serves to limit the number of hops a request can
    	/// transit on the way to its destination. It consists of an integer that is
    	/// decremented by one at each hop. If the Max-Forwards value reaches 0 before the
    	/// request reaches its destination, it will be rejected with a 483(Too Many Hops)
    	/// error response.
    	/// </para>
    	/// <para>
    	/// A UAC MUST insert a Max-Forwards header field into each request it originates
    	/// with a value that SHOULD be 70. This number was chosen to be sufficiently large
    	/// to guarantee that a request would not be dropped in any SIP network when there
    	/// were no loops, but not so large as to consume proxy resources when a loop does
    	/// occur. Lower values should be used with caution and only in networks where
    	/// topologies are known by the UA.
    	/// </para>
    	/// </remarks>
    	public int MaxForwards { get; set; }

    	/// <summary>
    	/// Gets or sets proxies that the response have to pass through.
    	/// </summary>
    	/// <remarks>
    	/// <para>The Via header field indicates the transport used for the transaction and
    	/// identifies the location where the response is to be sent. A Via header field
    	/// value is added only after the transport that will be used to reach the next hop
    	/// has been selected.</para>
    	/// </remarks>
    	public Via Via { get; set; }

    	/// <summary>
    	/// Gets or sets a SIP or SIPS URI that can be used to contact UA that sent the
    	/// request.
    	/// </summary>
    	/// <remarks>
    	/// <para>
    	/// The Contact header field MUST be present and contain exactly one SIP or SIPS
    	/// URI in any request that can result in the establishment of a dialog. For the
    	/// methods defined in this specification, that includes only the INVITE request.
    	/// For these requests, the scope of the Contact is global. That is, the Contact
    	/// header field value contains the URI at which the UA would like to receive
    	/// requests, and this URI MUST be valid even if used in subsequent requests
    	/// outside of any dialogs.
    	/// </para>
    	/// <para>
    	/// If the Request-URI or top Route header field value contains a SIPS URI, the
    	/// Contact header field MUST contain a SIPS URI as well.
    	/// </para>
    	/// </remarks>
    	public Contact Contact { get; set; }

		/// <summary>
		/// Create a new response.
		/// </summary>
		/// <param name="code">Response status code</param>
		/// <param name="reason">Reason to why the status code was used.</param>
		/// <returns>A Created response.</returns>
		/// <exception cref="InvalidOperationException">Provisional responses is only valid for INVITE method.</exception>
		public IResponse CreateResponse(StatusCode code, string reason)
		{
			if (StatusCodeHelper.Is1xx(code) && Method != "INVITE")
				throw new InvalidOperationException("Provisional responses is only valid for INVITE method.");

			Response response = new Response(SipVersion, code, reason);

            // When a 100 (Trying) response is generated, any Timestamp header field
			// present in the request MUST be copied into this 100 (Trying)
			// response.  If there is a delay in generating the response, the UAS
			// SHOULD add a delay value into the Timestamp value in the response.
			// This value MUST contain the difference between the time of sending of
			// the response and receipt of the request, measured in seconds.
			if (StatusCodeHelper.Is1xx(code) && Headers["Timestamp"] != null)
				response.Headers.Add("Timestamp", Headers["Timestamp"]);

			// The From field of the response MUST equal the From header field of
			// the request.  The Call-ID header field of the response MUST equal the
			// Call-ID header field of the request.  The CSeq header field of the
			// response MUST equal the CSeq field of the request.  The Via header
			// field values in the response MUST equal the Via header field values
			// in the request and MUST maintain the same ordering.
			response.From = From;
			response.CallId = CallId;
			response.CSeq = CSeq;
			response.Via = (Via)Via.Clone();


			// If a request contained a To tag in the request, the To header field
			// in the response MUST equal that of the request.  However, if the To
			// header field in the request did not contain a tag, the URI in the To
			// header field in the response MUST equal the URI in the To header
			// field; additionally, the UAS MUST add a tag to the To header field in
			// the response (with the exception of the 100 (Trying) response, in
			// which a tag MAY be present).  This serves to identify the UAS that is
			// responding, possibly resulting in a component of a dialog ID.  The
			// same tag MUST be used for all responses to that request, both final
			// and provisional (again excepting the 100 (Trying)).  Procedures for
			// the generation of tags are defined in Section 19.3.
			response.To = To;
			if (To.Parameters["Tag"] != null)
			{
				// RFC3261 Section 17.2.1:
				// The 100 (Trying) response is constructed
				// according to the procedures in Section 8.2.6, except that the
				// insertion of tags in the To header field of the response (when none
				// was present in the request) is downgraded from MAY to SHOULD NOT.
				if (!StatusCodeHelper.Is1xx(code))
					response.To.Parameters.Add("Tag", Guid.NewGuid().ToString().Replace("-", string.Empty));
			}

			return response;
		}
    }
}
